kind: Job
apiVersion: batch/v1
metadata:
  name: notifier-config-job
  namespace: stackrox
  annotations:
    argocd.argoproj.io/sync-wave: "1"
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    metadata:
      name: notifier-config-job
      namespace: stackrox
    spec:
      containers:
        - name: notifier-config-proc
          image: registry.access.redhat.com/ubi8/python-39
          command:
            - /bin/bash
            - '-c'
            - |
              pip install -q -U requests 2>/dev/null
              cat << EOF > notifiers-config.py

              import requests
              import json
              import os
              import sys

              CENTRAL = os.environ.get("CENTRAL")
              ACS_ADMIN_PASSWORD = os.environ.get("ACS_ADMIN_PASSWORD")

              r = requests.get(f"{CENTRAL}/v1/notifiers", verify=False, auth=("admin", ACS_ADMIN_PASSWORD))
              print(f"{r.status_code} {r.reason}")
              notifiers = json.loads(r.text)

              prev_notifiers = [x["name"] for x in notifiers["notifiers"]]
              
              
              with open("/tmp/notifier-payload.json", "r") as f:
                new_notifiers = json.load(f)
                for notifier in new_notifiers["notifiers"]:
                  if notifier["name"] in prev_notifiers:
                    print(f"Notifier {notifier['name']} already exists, skipping")
                    continue
                  else:
                    print(f"Adding {notifier['name']}")
                    s = requests.post(
                      f"{CENTRAL}/v1/notifiers",
                      verify=False,
                      auth=("admin", ACS_ADMIN_PASSWORD),
                      data=json.dumps(notifier)
                    )
                    print(f"{s.status_code} {s.reason}")
                    if s.status_code != 200:
                      sys.exit(1)
                    

              EOF

              python -Wignore notifiers-config.py
          
          volumeMounts:
          - name: notifier-payload
            mountPath: /tmp
          env:
            - name: ACS_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: acs-central-config
                  key: password
            - name: CENTRAL
              valueFrom:
                secretKeyRef:
                  name: acs-central-config
                  key: uiendpoint
      volumes:
      - name: notifier-payload
        secret:
          secretName: notifier-payload
      restartPolicy: Never
